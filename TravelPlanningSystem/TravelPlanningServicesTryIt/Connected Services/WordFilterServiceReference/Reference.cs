//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace TravelPlanningServicesTryIt.WordFilterServiceReference {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="WordFilterServiceReference.IWordFilter")]
    public interface IWordFilter {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWordFilter/FilterStopWords", ReplyAction="http://tempuri.org/IWordFilter/FilterStopWordsResponse")]
        string FilterStopWords(string inputText);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWordFilter/FilterStopWords", ReplyAction="http://tempuri.org/IWordFilter/FilterStopWordsResponse")]
        System.Threading.Tasks.Task<string> FilterStopWordsAsync(string inputText);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWordFilter/GetTopContentWords", ReplyAction="http://tempuri.org/IWordFilter/GetTopContentWordsResponse")]
        string[] GetTopContentWords(string inputText, int count);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWordFilter/GetTopContentWords", ReplyAction="http://tempuri.org/IWordFilter/GetTopContentWordsResponse")]
        System.Threading.Tasks.Task<string[]> GetTopContentWordsAsync(string inputText, int count);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWordFilter/CountContentWords", ReplyAction="http://tempuri.org/IWordFilter/CountContentWordsResponse")]
        int CountContentWords(string inputText);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWordFilter/CountContentWords", ReplyAction="http://tempuri.org/IWordFilter/CountContentWordsResponse")]
        System.Threading.Tasks.Task<int> CountContentWordsAsync(string inputText);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IWordFilterChannel : TravelPlanningServicesTryIt.WordFilterServiceReference.IWordFilter, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class WordFilterClient : System.ServiceModel.ClientBase<TravelPlanningServicesTryIt.WordFilterServiceReference.IWordFilter>, TravelPlanningServicesTryIt.WordFilterServiceReference.IWordFilter {
        
        public WordFilterClient() {
        }
        
        public WordFilterClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public WordFilterClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public WordFilterClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public WordFilterClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public string FilterStopWords(string inputText) {
            return base.Channel.FilterStopWords(inputText);
        }
        
        public System.Threading.Tasks.Task<string> FilterStopWordsAsync(string inputText) {
            return base.Channel.FilterStopWordsAsync(inputText);
        }
        
        public string[] GetTopContentWords(string inputText, int count) {
            return base.Channel.GetTopContentWords(inputText, count);
        }
        
        public System.Threading.Tasks.Task<string[]> GetTopContentWordsAsync(string inputText, int count) {
            return base.Channel.GetTopContentWordsAsync(inputText, count);
        }
        
        public int CountContentWords(string inputText) {
            return base.Channel.CountContentWords(inputText);
        }
        
        public System.Threading.Tasks.Task<int> CountContentWordsAsync(string inputText) {
            return base.Channel.CountContentWordsAsync(inputText);
        }
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace TravelPlanningServicesTryIt.CurrencyServiceReference {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="CurrencyServiceReference.ICurrencyConverter")]
    public interface ICurrencyConverter {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICurrencyConverter/ConvertCurrency", ReplyAction="http://tempuri.org/ICurrencyConverter/ConvertCurrencyResponse")]
        decimal ConvertCurrency(decimal amount, string fromCurrency, string toCurrency);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICurrencyConverter/ConvertCurrency", ReplyAction="http://tempuri.org/ICurrencyConverter/ConvertCurrencyResponse")]
        System.Threading.Tasks.Task<decimal> ConvertCurrencyAsync(decimal amount, string fromCurrency, string toCurrency);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICurrencyConverter/GetAvailableCurrencies", ReplyAction="http://tempuri.org/ICurrencyConverter/GetAvailableCurrenciesResponse")]
        string[] GetAvailableCurrencies();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICurrencyConverter/GetAvailableCurrencies", ReplyAction="http://tempuri.org/ICurrencyConverter/GetAvailableCurrenciesResponse")]
        System.Threading.Tasks.Task<string[]> GetAvailableCurrenciesAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ICurrencyConverterChannel : TravelPlanningServicesTryIt.CurrencyServiceReference.ICurrencyConverter, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class CurrencyConverterClient : System.ServiceModel.ClientBase<TravelPlanningServicesTryIt.CurrencyServiceReference.ICurrencyConverter>, TravelPlanningServicesTryIt.CurrencyServiceReference.ICurrencyConverter {
        
        public CurrencyConverterClient() {
        }
        
        public CurrencyConverterClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public CurrencyConverterClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CurrencyConverterClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CurrencyConverterClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public decimal ConvertCurrency(decimal amount, string fromCurrency, string toCurrency) {
            return base.Channel.ConvertCurrency(amount, fromCurrency, toCurrency);
        }
        
        public System.Threading.Tasks.Task<decimal> ConvertCurrencyAsync(decimal amount, string fromCurrency, string toCurrency) {
            return base.Channel.ConvertCurrencyAsync(amount, fromCurrency, toCurrency);
        }
        
        public string[] GetAvailableCurrencies() {
            return base.Channel.GetAvailableCurrencies();
        }
        
        public System.Threading.Tasks.Task<string[]> GetAvailableCurrenciesAsync() {
            return base.Channel.GetAvailableCurrenciesAsync();
        }
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WeatherTravelPlanning.TemperatureServiceReference {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="TemperatureServiceReference.ITemperatureConverter")]
    public interface ITemperatureConverter {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITemperatureConverter/ConvertTemperature", ReplyAction="http://tempuri.org/ITemperatureConverter/ConvertTemperatureResponse")]
        double ConvertTemperature(double temperature, string fromUnit, string toUnit);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITemperatureConverter/ConvertTemperature", ReplyAction="http://tempuri.org/ITemperatureConverter/ConvertTemperatureResponse")]
        System.Threading.Tasks.Task<double> ConvertTemperatureAsync(double temperature, string fromUnit, string toUnit);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITemperatureConverter/FahrenheitToCelsius", ReplyAction="http://tempuri.org/ITemperatureConverter/FahrenheitToCelsiusResponse")]
        double FahrenheitToCelsius(double fahrenheit);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITemperatureConverter/FahrenheitToCelsius", ReplyAction="http://tempuri.org/ITemperatureConverter/FahrenheitToCelsiusResponse")]
        System.Threading.Tasks.Task<double> FahrenheitToCelsiusAsync(double fahrenheit);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITemperatureConverter/CelsiusToFahrenheit", ReplyAction="http://tempuri.org/ITemperatureConverter/CelsiusToFahrenheitResponse")]
        double CelsiusToFahrenheit(double celsius);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITemperatureConverter/CelsiusToFahrenheit", ReplyAction="http://tempuri.org/ITemperatureConverter/CelsiusToFahrenheitResponse")]
        System.Threading.Tasks.Task<double> CelsiusToFahrenheitAsync(double celsius);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ITemperatureConverterChannel : WeatherTravelPlanning.TemperatureServiceReference.ITemperatureConverter, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class TemperatureConverterClient : System.ServiceModel.ClientBase<WeatherTravelPlanning.TemperatureServiceReference.ITemperatureConverter>, WeatherTravelPlanning.TemperatureServiceReference.ITemperatureConverter {
        
        public TemperatureConverterClient() {
        }
        
        public TemperatureConverterClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public TemperatureConverterClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public TemperatureConverterClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public TemperatureConverterClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public double ConvertTemperature(double temperature, string fromUnit, string toUnit) {
            return base.Channel.ConvertTemperature(temperature, fromUnit, toUnit);
        }
        
        public System.Threading.Tasks.Task<double> ConvertTemperatureAsync(double temperature, string fromUnit, string toUnit) {
            return base.Channel.ConvertTemperatureAsync(temperature, fromUnit, toUnit);
        }
        
        public double FahrenheitToCelsius(double fahrenheit) {
            return base.Channel.FahrenheitToCelsius(fahrenheit);
        }
        
        public System.Threading.Tasks.Task<double> FahrenheitToCelsiusAsync(double fahrenheit) {
            return base.Channel.FahrenheitToCelsiusAsync(fahrenheit);
        }
        
        public double CelsiusToFahrenheit(double celsius) {
            return base.Channel.CelsiusToFahrenheit(celsius);
        }
        
        public System.Threading.Tasks.Task<double> CelsiusToFahrenheitAsync(double celsius) {
            return base.Channel.CelsiusToFahrenheitAsync(celsius);
        }
    }
}

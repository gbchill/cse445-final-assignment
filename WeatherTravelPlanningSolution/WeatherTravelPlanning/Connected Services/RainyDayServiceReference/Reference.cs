//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WeatherTravelPlanning.RainyDayServiceReference {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="RainyDayServiceReference.IRainyDayAdvisor")]
    public interface IRainyDayAdvisor {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRainyDayAdvisor/GetRainyDayAdvice", ReplyAction="http://tempuri.org/IRainyDayAdvisor/GetRainyDayAdviceResponse")]
        string[] GetRainyDayAdvice(string location, System.DateTime date);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRainyDayAdvisor/GetRainyDayAdvice", ReplyAction="http://tempuri.org/IRainyDayAdvisor/GetRainyDayAdviceResponse")]
        System.Threading.Tasks.Task<string[]> GetRainyDayAdviceAsync(string location, System.DateTime date);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRainyDayAdvisor/GetIndoorActivities", ReplyAction="http://tempuri.org/IRainyDayAdvisor/GetIndoorActivitiesResponse")]
        string[] GetIndoorActivities(string location);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRainyDayAdvisor/GetIndoorActivities", ReplyAction="http://tempuri.org/IRainyDayAdvisor/GetIndoorActivitiesResponse")]
        System.Threading.Tasks.Task<string[]> GetIndoorActivitiesAsync(string location);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRainyDayAdvisor/IsItRainy", ReplyAction="http://tempuri.org/IRainyDayAdvisor/IsItRainyResponse")]
        bool IsItRainy(string location, System.DateTime date);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRainyDayAdvisor/IsItRainy", ReplyAction="http://tempuri.org/IRainyDayAdvisor/IsItRainyResponse")]
        System.Threading.Tasks.Task<bool> IsItRainyAsync(string location, System.DateTime date);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IRainyDayAdvisorChannel : WeatherTravelPlanning.RainyDayServiceReference.IRainyDayAdvisor, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class RainyDayAdvisorClient : System.ServiceModel.ClientBase<WeatherTravelPlanning.RainyDayServiceReference.IRainyDayAdvisor>, WeatherTravelPlanning.RainyDayServiceReference.IRainyDayAdvisor {
        
        public RainyDayAdvisorClient() {
        }
        
        public RainyDayAdvisorClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public RainyDayAdvisorClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public RainyDayAdvisorClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public RainyDayAdvisorClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public string[] GetRainyDayAdvice(string location, System.DateTime date) {
            return base.Channel.GetRainyDayAdvice(location, date);
        }
        
        public System.Threading.Tasks.Task<string[]> GetRainyDayAdviceAsync(string location, System.DateTime date) {
            return base.Channel.GetRainyDayAdviceAsync(location, date);
        }
        
        public string[] GetIndoorActivities(string location) {
            return base.Channel.GetIndoorActivities(location);
        }
        
        public System.Threading.Tasks.Task<string[]> GetIndoorActivitiesAsync(string location) {
            return base.Channel.GetIndoorActivitiesAsync(location);
        }
        
        public bool IsItRainy(string location, System.DateTime date) {
            return base.Channel.IsItRainy(location, date);
        }
        
        public System.Threading.Tasks.Task<bool> IsItRainyAsync(string location, System.DateTime date) {
            return base.Channel.IsItRainyAsync(location, date);
        }
    }
}
